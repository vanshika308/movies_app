{"ast":null,"code":"var _jsxFileName = \"D:\\\\beginning of react\\\\sharpener\\\\restApiReact\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport InputForm from './components/InputForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const retryInterval = 5000;\n  let retryTimer = null;\n  async function handleAddMovieSubmit(newMovieData) {\n    setMovies(prevMovies => [...prevMovies, newMovieData]);\n    const response = await fetch('https://react-http-b96d4-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movies),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n  ;\n  const fetchMoviesHandler = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      if (!response.ok) {\n        throw new Error('Something went wrong......RETRYING');\n      }\n      const data = await response.json();\n      const loadedMovies = [];\n      const transformedMovies = data.map(movieData => ({\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      }));\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n      retryTimer = setTimeout(fetchMoviesHandler, retryInterval);\n    }\n    setIsLoading(false);\n  };\n  const handleCancelClick = () => {\n    clearTimeout(retryTimer);\n    setError(null);\n  };\n  useEffect(() => {\n    fetchMoviesHandler();\n    return () => {\n      clearTimeout(retryTimer);\n    };\n  }, []);\n  const content = React.useMemo(() => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }, this);\n    } else if (movies.length > 0) {\n      return /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 14\n      }, this);\n    } else if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCancelClick,\n          children: \"Cancel Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this);\n    }\n  }, [isLoading, movies, error]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputForm, {\n      onAddMovie: handleAddMovieSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QUsFnKENejqa4sbCaQZYPNn++iU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MoviesList","InputForm","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","retryInterval","retryTimer","handleAddMovieSubmit","newMovieData","prevMovies","response","fetch","method","body","JSON","stringify","headers","data","json","console","log","fetchMoviesHandler","ok","Error","loadedMovies","transformedMovies","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","setTimeout","handleCancelClick","clearTimeout","content","useMemo","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","Fragment","onAddMovie","_c","$RefreshReg$"],"sources":["D:/beginning of react/sharpener/restApiReact/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport InputForm from './components/InputForm';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); \n  const [error, setError] = useState(null);\n  const retryInterval = 5000;\n  let retryTimer = null;\n\n\n  async function handleAddMovieSubmit  (newMovieData) {\n    setMovies((prevMovies) => [...prevMovies, newMovieData]);\n    const response = await fetch('https://react-http-b96d4-default-rtdb.firebaseio.com/movies.json',\n     {\n      method: 'POST',\n      body: JSON.stringify(movies),\n      headers:{\n        'Content-type' : 'application/json'\n      }\n    });\n     const data = await response.json();\n     console.log(data);\n  };\n\n  const fetchMoviesHandler = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong......RETRYING');\n      }\n      const data = await response.json();\n\n       const loadedMovies=[];\n       \n\n      const transformedMovies = data.map((movieData) => ({\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date,\n      }));\n\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n      retryTimer = setTimeout(fetchMoviesHandler, retryInterval);\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleCancelClick = () => {\n    clearTimeout(retryTimer);\n    setError(null); \n  };\n\n  useEffect(() => {\n    fetchMoviesHandler(); \n    return () => {\n      clearTimeout(retryTimer);\n    };\n  }, []); \n\n  const content = React.useMemo(() => {\n    if (isLoading) {\n      return <p>Loading....</p>;\n    } else if (movies.length > 0) {\n      return <MoviesList movies={movies} />;\n    } else if (error) {\n      return (\n        <div>\n          <p>{error}</p>\n          <button onClick={handleCancelClick}>Cancel Retry</button>\n        </div>\n      );\n    }\n  }, [isLoading, movies, error]);\n\n  return (\n    <React.Fragment>\n      <InputForm onAddMovie={handleAddMovieSubmit}/>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMc,aAAa,GAAG,IAAI;EAC1B,IAAIC,UAAU,GAAG,IAAI;EAGrB,eAAeC,oBAAoBA,CAAGC,YAAY,EAAE;IAClDR,SAAS,CAAES,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAED,YAAY,CAAC,CAAC;IACxD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,kEAAkE,EAC9F;MACCC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,MAAM,CAAC;MAC5BiB,OAAO,EAAC;QACN,cAAc,EAAG;MACnB;IACF,CAAC,CAAC;IACD,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACpB;EAAC;EAED,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrCnB,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;MAE5D,IAAI,CAACD,QAAQ,CAACY,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MACvD;MACA,MAAMN,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAEjC,MAAMM,YAAY,GAAC,EAAE;MAGtB,MAAMC,iBAAiB,GAAGR,IAAI,CAACS,GAAG,CAAEC,SAAS,KAAM;QACjDC,EAAE,EAAED,SAAS,CAACE,UAAU;QACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;QACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;QACpCC,WAAW,EAAEN,SAAS,CAACO;MACzB,CAAC,CAAC,CAAC;MAEHlC,SAAS,CAACyB,iBAAiB,CAAC;IAC9B,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACgC,OAAO,CAAC;MACvB7B,UAAU,GAAG8B,UAAU,CAACf,kBAAkB,EAAEhB,aAAa,CAAC;IAC5D;IAEAH,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMmC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BC,YAAY,CAAChC,UAAU,CAAC;IACxBF,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd6B,kBAAkB,CAAC,CAAC;IACpB,OAAO,MAAM;MACXiB,YAAY,CAAChC,UAAU,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMiC,OAAO,GAAGjD,KAAK,CAACkD,OAAO,CAAC,MAAM;IAClC,IAAIvC,SAAS,EAAE;MACb,oBAAOL,OAAA;QAAA6C,QAAA,EAAG;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAC3B,CAAC,MAAM,IAAI9C,MAAM,CAAC+C,MAAM,GAAG,CAAC,EAAE;MAC5B,oBAAOlD,OAAA,CAACH,UAAU;QAACM,MAAM,EAAEA;MAAO;QAAA2C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACvC,CAAC,MAAM,IAAI1C,KAAK,EAAE;MAChB,oBACEP,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAA6C,QAAA,EAAItC;QAAK;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACdjD,OAAA;UAAQmD,OAAO,EAAEV,iBAAkB;UAAAI,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC;IAEV;EACF,CAAC,EAAE,CAAC5C,SAAS,EAAEF,MAAM,EAAEI,KAAK,CAAC,CAAC;EAE9B,oBACEP,OAAA,CAACN,KAAK,CAAC0D,QAAQ;IAAAP,QAAA,gBACb7C,OAAA,CAACF,SAAS;MAACuD,UAAU,EAAE1C;IAAqB;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC9CjD,OAAA;MAAA6C,QAAA,EAAUF;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAErB;AAAC/C,EAAA,CAtFQD,GAAG;AAAAqD,EAAA,GAAHrD,GAAG;AAwFZ,eAAeA,GAAG;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}