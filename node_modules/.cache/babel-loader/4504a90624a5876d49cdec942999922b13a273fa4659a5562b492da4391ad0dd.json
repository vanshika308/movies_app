{"ast":null,"code":"var _jsxFileName = \"D:\\\\beginning of react\\\\sharpener\\\\restApiReact\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // Initially set to true\n  const [error, setError] = useState(null);\n  const retryInterval = 5000;\n  let retryTimer = null;\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      if (!response.ok) {\n        throw new Error('Something went wrong......RETRYING');\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => ({\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      }));\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n      retryTimer = setTimeout(fetchMoviesHandler, retryInterval);\n    }\n    setIsLoading(false);\n  }\n  const handleCancelClick = () => {\n    clearTimeout(retryTimer);\n    setError(null); // Clear error when canceling\n  };\n\n  useEffect(() => {\n    fetchMoviesHandler(); // Automatically fetch movies on mount\n    return () => {\n      clearTimeout(retryTimer);\n    };\n  }, []); // Empty dependency array to run only on mount\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading....\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 17\n  }, this); // Display loading by default\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancelClick,\n        children: \"Cancel Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oqUEZn1u+NzjFoGVe71VGe+9I+w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MoviesList","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","retryInterval","retryTimer","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","setTimeout","handleCancelClick","clearTimeout","content","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","Fragment","_c","$RefreshReg$"],"sources":["D:/beginning of react/sharpener/restApiReact/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // Initially set to true\n  const [error, setError] = useState(null);\n  const retryInterval = 5000;\n  let retryTimer = null;\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong......RETRYING');\n      }\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movieData) => ({\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date,\n      }));\n\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n      retryTimer = setTimeout(fetchMoviesHandler, retryInterval);\n    }\n\n    setIsLoading(false);\n  }\n\n  const handleCancelClick = () => {\n    clearTimeout(retryTimer);\n    setError(null); // Clear error when canceling\n  };\n\n  useEffect(() => {\n    fetchMoviesHandler(); // Automatically fetch movies on mount\n    return () => {\n      clearTimeout(retryTimer);\n    };\n  }, []); // Empty dependency array to run only on mount\n\n  let content = <p>Loading....</p>; // Display loading by default\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n  if (error) {\n    content = (\n      <div>\n        <p>{error}</p>\n        <button onClick={handleCancelClick}>Cancel Retry</button>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}